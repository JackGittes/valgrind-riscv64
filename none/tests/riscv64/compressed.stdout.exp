Compressed Instructions, Quadrant 0
c.addi4spn a0, sp, 4 ::
  inputs: sp=0x0000000000001000
  output: a0=0x0000000000001004
c.addi4spn a0, sp, 8 ::
  inputs: sp=0x0000000000001000
  output: a0=0x0000000000001008
c.addi4spn a0, sp, 16 ::
  inputs: sp=0x0000000000001000
  output: a0=0x0000000000001010
c.addi4spn a0, sp, 32 ::
  inputs: sp=0x0000000000001000
  output: a0=0x0000000000001020
c.addi4spn a0, sp, 64 ::
  inputs: sp=0x0000000000001000
  output: a0=0x0000000000001040
c.addi4spn a0, sp, 128 ::
  inputs: sp=0x0000000000001000
  output: a0=0x0000000000001080
c.addi4spn a0, sp, 256 ::
  inputs: sp=0x0000000000001000
  output: a0=0x0000000000001100
c.addi4spn a0, sp, 512 ::
  inputs: sp=0x0000000000001000
  output: a0=0x0000000000001200
c.addi4spn a0, sp, 1020 ::
  inputs: sp=0x0000000000001000
  output: a0=0x00000000000013fc
c.addi4spn a0, sp, 4 ::
  inputs: sp=0x000000007ffffffc
  output: a0=0x0000000080000000
c.addi4spn a0, sp, 4 ::
  inputs: sp=0x00000000fffffffb
  output: a0=0x00000000ffffffff
c.addi4spn a0, sp, 4 ::
  inputs: sp=0x00000000fffffffc
  output: a0=0x0000000100000000
c.addi4spn a5, sp, 4 ::
  inputs: sp=0x0000000000001000
  output: a0=0x0000000000000020
c.lw a0, 0(a1) ::
  inputs: a1=&area_mid
  output: a0=0xffffffffffc411c4
  no memory changes
c.lw a0, 4(a1) ::
  inputs: a1=&area_mid
  output: a0=0x00000000413cead2
  no memory changes
c.lw a0, 8(a1) ::
  inputs: a1=&area_mid
  output: a0=0x000000004c88ae0d
  no memory changes
c.lw a0, 16(a1) ::
  inputs: a1=&area_mid
  output: a0=0x000000000e860c39
  no memory changes
c.lw a0, 32(a1) ::
  inputs: a1=&area_mid
  output: a0=0x0000000035968b0a
  no memory changes
c.lw a0, 64(a1) ::
  inputs: a1=&area_mid
  output: a0=0xffffffffb2ddaa1e
  no memory changes
c.lw a0, 124(a1) ::
  inputs: a1=&area_mid
  output: a0=0x00000000442729db
  no memory changes
c.lw a4, 0(a5) ::
  inputs: a5=&area_mid
  output: a4=0xfffffffff353aed5
  no memory changes
c.ld a0, 0(a1) ::
  inputs: a1=&area_mid
  output: a0=0x46518421715669c6
  no memory changes
c.ld a0, 8(a1) ::
  inputs: a1=&area_mid
  output: a0=0x8dd9540466eef7d3
  no memory changes
c.ld a0, 16(a1) ::
  inputs: a1=&area_mid
  output: a0=0xc8dd1991b6cb297d
  no memory changes
c.ld a0, 32(a1) ::
  inputs: a1=&area_mid
  output: a0=0xf33908f372f209e1
  no memory changes
c.ld a0, 64(a1) ::
  inputs: a1=&area_mid
  output: a0=0xbaae5dda57a6295a
  no memory changes
c.ld a0, 128(a1) ::
  inputs: a1=&area_mid
  output: a0=0x2d9b0d5f9d85c79b
  no memory changes
c.ld a0, 248(a1) ::
  inputs: a1=&area_mid
  output: a0=0xef5942a1c0e0ca1e
  no memory changes
c.ld a4, 0(a5) ::
  inputs: a5=&area_mid
  output: a4=0x2bc7fed064e506d7
  no memory changes
c.sw a0, 0(a1) ::
  inputs: a0=0xabcdef0123456789, a1=&area_mid
  [+000]  89 67 45 23 .. .. .. .. .. .. .. .. .. .. .. ..
c.sw a0, 4(a1) ::
  inputs: a0=0xabcdef0123456789, a1=&area_mid
  [+000]  .. .. .. .. 89 67 45 23 .. .. .. .. .. .. .. ..
c.sw a0, 8(a1) ::
  inputs: a0=0xabcdef0123456789, a1=&area_mid
  [+000]  .. .. .. .. .. .. .. .. 89 67 45 23 .. .. .. ..
c.sw a0, 16(a1) ::
  inputs: a0=0xabcdef0123456789, a1=&area_mid
  [+016]  89 67 45 23 .. .. .. .. .. .. .. .. .. .. .. ..
c.sw a0, 32(a1) ::
  inputs: a0=0xabcdef0123456789, a1=&area_mid
  [+032]  89 67 45 23 .. .. .. .. .. .. .. .. .. .. .. ..
c.sw a0, 64(a1) ::
  inputs: a0=0xabcdef0123456789, a1=&area_mid
  [+064]  89 67 45 23 .. .. .. .. .. .. .. .. .. .. .. ..
c.sw a0, 124(a1) ::
  inputs: a0=0xabcdef0123456789, a1=&area_mid
  [+112]  .. .. .. .. .. .. .. .. .. .. .. .. 89 67 45 23
c.sw a4, 0(a5) ::
  inputs: a4=0xabcdef0123456789, a5=&area_mid
  [+000]  89 67 45 23 .. .. .. .. .. .. .. .. .. .. .. ..
c.sd a0, 0(a1) ::
  inputs: a0=0xabcdef0123456789, a1=&area_mid
  [+000]  89 67 45 23 01 ef cd ab .. .. .. .. .. .. .. ..
c.sd a0, 8(a1) ::
  inputs: a0=0xabcdef0123456789, a1=&area_mid
  [+000]  .. .. .. .. .. .. .. .. 89 67 45 23 01 ef cd ab
c.sd a0, 16(a1) ::
  inputs: a0=0xabcdef0123456789, a1=&area_mid
  [+016]  89 67 45 23 01 ef cd ab .. .. .. .. .. .. .. ..
c.sd a0, 32(a1) ::
  inputs: a0=0xabcdef0123456789, a1=&area_mid
  [+032]  89 67 45 23 01 ef cd ab .. .. .. .. .. .. .. ..
c.sd a0, 64(a1) ::
  inputs: a0=0xabcdef0123456789, a1=&area_mid
  [+064]  89 67 45 23 01 ef cd ab .. .. .. .. .. .. .. ..
c.sd a0, 128(a1) ::
  inputs: a0=0xabcdef0123456789, a1=&area_mid
  [+128]  89 67 45 23 01 ef cd ab .. .. .. .. .. .. .. ..
c.sd a0, 248(a1) ::
  inputs: a0=0xabcdef0123456789, a1=&area_mid
  [+240]  .. .. .. .. .. .. .. .. 89 67 45 23 01 ef cd ab
c.sd a4, 0(a5) ::
  inputs: a4=0xabcdef0123456789, a5=&area_mid
  [+000]  89 67 45 23 01 ef cd ab .. .. .. .. .. .. .. ..

Compressed Instructions, Quadrant 1
c.nop ::
c.addi a0, 1 ::
  inputs: a0=0x0000000000001000
  output: a0=0x0000000000001001
c.addi a0, 2 ::
  inputs: a0=0x0000000000001000
  output: a0=0x0000000000001002
c.addi a0, 4 ::
  inputs: a0=0x0000000000001000
  output: a0=0x0000000000001004
c.addi a0, 8 ::
  inputs: a0=0x0000000000001000
  output: a0=0x0000000000001008
c.addi a0, 16 ::
  inputs: a0=0x0000000000001000
  output: a0=0x0000000000001010
c.addi a0, 31 ::
  inputs: a0=0x0000000000001000
  output: a0=0x000000000000101f
c.addi a0, -32 ::
  inputs: a0=0x0000000000001000
  output: a0=0x0000000000000fe0
c.addi a0, 1 ::
  inputs: a0=0x000000007fffffff
  output: a0=0x0000000080000000
c.addi a0, 1 ::
  inputs: a0=0x00000000fffffffe
  output: a0=0x00000000ffffffff
c.addi a0, 1 ::
  inputs: a0=0x00000000ffffffff
  output: a0=0x0000000100000000
c.addi t6, 1 ::
  inputs: t6=0x0000000000001000
  output: t6=0x0000000000001001
c.addiw a0, 0 ::
  inputs: a0=0x0000000000001000
  output: a0=0x0000000000001000
c.addiw a0, 1 ::
  inputs: a0=0x0000000000001000
  output: a0=0x0000000000001001
c.addiw a0, 2 ::
  inputs: a0=0x0000000000001000
  output: a0=0x0000000000001002
c.addiw a0, 4 ::
  inputs: a0=0x0000000000001000
  output: a0=0x0000000000001004
c.addiw a0, 8 ::
  inputs: a0=0x0000000000001000
  output: a0=0x0000000000001008
c.addiw a0, 16 ::
  inputs: a0=0x0000000000001000
  output: a0=0x0000000000001010
c.addiw a0, 31 ::
  inputs: a0=0x0000000000001000
  output: a0=0x000000000000101f
c.addiw a0, -32 ::
  inputs: a0=0x0000000000001000
  output: a0=0x0000000000000fe0
c.addiw a0, 1 ::
  inputs: a0=0x000000007fffffff
  output: a0=0xffffffff80000000
c.addiw a0, 1 ::
  inputs: a0=0x00000000fffffffe
  output: a0=0xffffffffffffffff
c.addiw a0, 1 ::
  inputs: a0=0x00000000ffffffff
  output: a0=0x0000000000000000
c.addiw t6, 0 ::
  inputs: t6=0x0000000000001000
  output: t6=0x0000000000001000
c.li a0, 0 ::
  output: a0=0x0000000000000000
c.li a0, 1 ::
  output: a0=0x0000000000000001
c.li a0, 2 ::
  output: a0=0x0000000000000002
c.li a0, 4 ::
  output: a0=0x0000000000000004
c.li a0, 8 ::
  output: a0=0x0000000000000008
c.li a0, 15 ::
  output: a0=0x000000000000000f
c.li a0, -16 ::
  output: a0=0xfffffffffffffff0
c.li t6, 0 ::
  output: t6=0x0000000000000000
c.addi16sp sp, 16 ::
  inputs: sp=0x0000000000001000
  output: sp=0x0000000000001010
c.addi16sp sp, 32 ::
  inputs: sp=0x0000000000001000
  output: sp=0x0000000000001020
c.addi16sp sp, 64 ::
  inputs: sp=0x0000000000001000
  output: sp=0x0000000000001040
c.addi16sp sp, 128 ::
  inputs: sp=0x0000000000001000
  output: sp=0x0000000000001080
c.addi16sp sp, 256 ::
  inputs: sp=0x0000000000001000
  output: sp=0x0000000000001100
c.addi16sp sp, 496 ::
  inputs: sp=0x0000000000001000
  output: sp=0x00000000000011f0
c.addi16sp sp, -512 ::
  inputs: sp=0x0000000000001000
  output: sp=0x0000000000000e00
c.addi16sp sp, 16 ::
  inputs: sp=0x000000007ffffff0
  output: sp=0x0000000080000000
c.addi16sp sp, 16 ::
  inputs: sp=0x00000000ffffffef
  output: sp=0x00000000ffffffff
c.addi16sp sp, 16 ::
  inputs: sp=0x00000000fffffff0
  output: sp=0x0000000100000000
c.lui a0, 1 ::
  output: a0=0x0000000000001000
c.lui a0, 2 ::
  output: a0=0x0000000000002000
c.lui a0, 4 ::
  output: a0=0x0000000000004000
c.lui a0, 8 ::
  output: a0=0x0000000000008000
c.lui a0, 16 ::
  output: a0=0x0000000000010000
c.lui a0, 31 ::
  output: a0=0x000000000001f000
c.lui a0, 0xfffe0 ::
  output: a0=0xfffffffffffe0000
c.lui a0, 0xffff0 ::
  output: a0=0xffffffffffff0000
c.lui a0, 0xffff8 ::
  output: a0=0xffffffffffff8000
c.lui a0, 0xffffc ::
  output: a0=0xffffffffffffc000
c.lui a0, 0xffffe ::
  output: a0=0xffffffffffffe000
c.lui a0, 0xfffff ::
  output: a0=0xfffffffffffff000
c.lui t6, 1 ::
  output: t6=0x0000000000001000
c.srli a0, 1 ::
  inputs: a0=0xabcdef0123456789
  output: a0=0x55e6f78091a2b3c4
c.srli a0, 2 ::
  inputs: a0=0xabcdef0123456789
  output: a0=0x2af37bc048d159e2
c.srli a0, 4 ::
  inputs: a0=0xabcdef0123456789
  output: a0=0x0abcdef012345678
c.srli a0, 8 ::
  inputs: a0=0xabcdef0123456789
  output: a0=0x00abcdef01234567
c.srli a0, 16 ::
  inputs: a0=0xabcdef0123456789
  output: a0=0x0000abcdef012345
c.srli a0, 32 ::
  inputs: a0=0xabcdef0123456789
  output: a0=0x00000000abcdef01
c.srli a0, 63 ::
  inputs: a0=0xabcdef0123456789
  output: a0=0x0000000000000001
c.srli a5, 1 ::
  inputs: a5=0xabcdef0123456789
  output: a5=0x55e6f78091a2b3c4
c.srai a0, 1 ::
  inputs: a0=0xabcdef0123456789
  output: a0=0xd5e6f78091a2b3c4
c.srai a0, 2 ::
  inputs: a0=0xabcdef0123456789
  output: a0=0xeaf37bc048d159e2
c.srai a0, 4 ::
  inputs: a0=0xabcdef0123456789
  output: a0=0xfabcdef012345678
c.srai a0, 8 ::
  inputs: a0=0xabcdef0123456789
  output: a0=0xffabcdef01234567
c.srai a0, 16 ::
  inputs: a0=0xabcdef0123456789
  output: a0=0xffffabcdef012345
c.srai a0, 32 ::
  inputs: a0=0xabcdef0123456789
  output: a0=0xffffffffabcdef01
c.srai a0, 63 ::
  inputs: a0=0xabcdef0123456789
  output: a0=0xffffffffffffffff
c.srai a5, 1 ::
  inputs: a5=0xabcdef0123456789
  output: a5=0xd5e6f78091a2b3c4
c.andi a0, 0 ::
  inputs: a0=0xffffffffffffffff
  output: a0=0x0000000000000000
c.andi a0, 1 ::
  inputs: a0=0xffffffffffffffff
  output: a0=0x0000000000000001
c.andi a0, 2 ::
  inputs: a0=0xffffffffffffffff
  output: a0=0x0000000000000002
c.andi a0, 4 ::
  inputs: a0=0xffffffffffffffff
  output: a0=0x0000000000000004
c.andi a0, 8 ::
  inputs: a0=0xffffffffffffffff
  output: a0=0x0000000000000008
c.andi a0, 16 ::
  inputs: a0=0xffffffffffffffff
  output: a0=0x0000000000000010
c.andi a0, 31 ::
  inputs: a0=0xffffffffffffffff
  output: a0=0x000000000000001f
c.andi a5, 0 ::
  inputs: a5=0xffffffffffffffff
  output: a5=0x0000000000000000
c.sub a0, a1 ::
  inputs: a0=0x0000000000001000, a1=0x0000000000000fff
  output: a0=0x0000000000000001
c.sub a0, a1 ::
  inputs: a0=0x0000000000001000, a1=0x0000000000001000
  output: a0=0x0000000000000000
c.sub a0, a1 ::
  inputs: a0=0x0000000000001000, a1=0x0000000000001001
  output: a0=0xffffffffffffffff
c.sub a0, a1 ::
  inputs: a0=0xffffffffffffffff, a1=0x0000000000000000
  output: a0=0xffffffffffffffff
c.sub a0, a1 ::
  inputs: a0=0x0000000100000000, a1=0x0000000000000001
  output: a0=0x00000000ffffffff
c.sub a4, a5 ::
  inputs: a4=0x0000000000001000, a5=0x0000000000000fff
  output: a4=0x0000000000000001
c.xor a0, a1 ::
  inputs: a0=0x0000ffff0000ffff, a1=0x00000000ffffffff
  output: a0=0x0000ffffffff0000
c.xor a4, a5 ::
  inputs: a4=0x0000ffff0000ffff, a5=0x00000000ffffffff
  output: a4=0x0000ffffffff0000
c.or a0, a1 ::
  inputs: a0=0x0000ffff0000ffff, a1=0x00000000ffffffff
  output: a0=0x0000ffffffffffff
c.or a4, a5 ::
  inputs: a4=0x0000ffff0000ffff, a5=0x00000000ffffffff
  output: a4=0x0000ffffffffffff
c.and a0, a1 ::
  inputs: a0=0x0000ffff0000ffff, a1=0x00000000ffffffff
  output: a0=0x000000000000ffff
c.and a4, a5 ::
  inputs: a4=0x0000ffff0000ffff, a5=0x00000000ffffffff
  output: a4=0x000000000000ffff
c.subw a0, a1 ::
  inputs: a0=0x0000000000001000, a1=0x0000000000000fff
  output: a0=0x0000000000000001
c.subw a0, a1 ::
  inputs: a0=0x0000000000001000, a1=0x0000000000001000
  output: a0=0x0000000000000000
c.subw a0, a1 ::
  inputs: a0=0x0000000000001000, a1=0x0000000000001001
  output: a0=0xffffffffffffffff
c.subw a0, a1 ::
  inputs: a0=0xffffffffffffffff, a1=0x0000000000000000
  output: a0=0xffffffffffffffff
c.subw a0, a1 ::
  inputs: a0=0x0000000100000000, a1=0x0000000000000001
  output: a0=0xffffffffffffffff
c.subw a4, a5 ::
  inputs: a4=0x0000000000001000, a5=0x0000000000000fff
  output: a4=0x0000000000000001
c.addw a0, a1 ::
  inputs: a0=0x0000000000001000, a1=0x0000000000002000
  output: a0=0x0000000000003000
c.addw a0, a1 ::
  inputs: a0=0x000000007fffffff, a1=0x0000000000000001
  output: a0=0xffffffff80000000
c.addw a0, a1 ::
  inputs: a0=0x00000000fffffffe, a1=0x0000000000000001
  output: a0=0xffffffffffffffff
c.addw a0, a1 ::
  inputs: a0=0x00000000ffffffff, a1=0x0000000000000001
  output: a0=0x0000000000000000
c.addw a0, a1 ::
  inputs: a0=0xfffffffffffffffe, a1=0x0000000000000001
  output: a0=0xffffffffffffffff
c.addw a0, a1 ::
  inputs: a0=0xffffffffffffffff, a1=0x0000000000000001
  output: a0=0x0000000000000000
c.addw a4, a5 ::
  inputs: a4=0x0000000000001000, a5=0x0000000000002000
  output: a4=0x0000000000003000
c.j .-2048 ::
  target: reached
c.j .-1024 ::
  target: reached
c.j .-512 ::
  target: reached
c.j .-256 ::
  target: reached
c.j .-128 ::
  target: reached
c.j .-64 ::
  target: reached
c.j .-32 ::
  target: reached
c.j .-16 ::
  target: reached
c.j .-8 ::
  target: reached
c.j .-6 ::
  target: reached
c.j .-4 ::
  target: reached
c.j .+4 ::
  target: reached
c.j .+6 ::
  target: reached
c.j .+8 ::
  target: reached
c.j .+16 ::
  target: reached
c.j .+32 ::
  target: reached
c.j .+64 ::
  target: reached
c.j .+128 ::
  target: reached
c.j .+256 ::
  target: reached
c.j .+512 ::
  target: reached
c.j .+1024 ::
  target: reached
c.j .+2044 ::
  target: reached
c.beqz a0, .-256 ::
  inputs: a0=0x0000000000000000
  target: reached
c.beqz a0, .-128 ::
  inputs: a0=0x0000000000000000
  target: reached
c.beqz a0, .-64 ::
  inputs: a0=0x0000000000000000
  target: reached
c.beqz a0, .-32 ::
  inputs: a0=0x0000000000000000
  target: reached
c.beqz a0, .-16 ::
  inputs: a0=0x0000000000000000
  target: reached
c.beqz a0, .-8 ::
  inputs: a0=0x0000000000000000
  target: reached
c.beqz a0, .-6 ::
  inputs: a0=0x0000000000000000
  target: reached
c.beqz a0, .-4 ::
  inputs: a0=0x0000000000000000
  target: reached
c.beqz a0, .+4 ::
  inputs: a0=0x0000000000000000
  target: reached
c.beqz a0, .+6 ::
  inputs: a0=0x0000000000000000
  target: reached
c.beqz a0, .+8 ::
  inputs: a0=0x0000000000000000
  target: reached
c.beqz a0, .+16 ::
  inputs: a0=0x0000000000000000
  target: reached
c.beqz a0, .+32 ::
  inputs: a0=0x0000000000000000
  target: reached
c.beqz a0, .+64 ::
  inputs: a0=0x0000000000000000
  target: reached
c.beqz a0, .+128 ::
  inputs: a0=0x0000000000000000
  target: reached
c.beqz a0, .+252 ::
  inputs: a0=0x0000000000000000
  target: reached
c.beqz a5, .-256 ::
  inputs: a5=0x0000000000000000
  target: reached
c.beqz a0, 1f ::
  inputs: a0=0x0000000000000000
  branch: taken
c.beqz a0, 1f ::
  inputs: a0=0x0000000000000001
  branch: not taken
c.beqz a0, 1f ::
  inputs: a0=0x8000000000000000
  branch: not taken
c.bnez a0, .-256 ::
  inputs: a0=0x0000000000000001
  target: reached
c.bnez a0, .-128 ::
  inputs: a0=0x0000000000000001
  target: reached
c.bnez a0, .-64 ::
  inputs: a0=0x0000000000000001
  target: reached
c.bnez a0, .-32 ::
  inputs: a0=0x0000000000000001
  target: reached
c.bnez a0, .-16 ::
  inputs: a0=0x0000000000000001
  target: reached
c.bnez a0, .-8 ::
  inputs: a0=0x0000000000000001
  target: reached
c.bnez a0, .-6 ::
  inputs: a0=0x0000000000000001
  target: reached
c.bnez a0, .-4 ::
  inputs: a0=0x0000000000000001
  target: reached
c.bnez a0, .+4 ::
  inputs: a0=0x0000000000000001
  target: reached
c.bnez a0, .+6 ::
  inputs: a0=0x0000000000000001
  target: reached
c.bnez a0, .+8 ::
  inputs: a0=0x0000000000000001
  target: reached
c.bnez a0, .+16 ::
  inputs: a0=0x0000000000000001
  target: reached
c.bnez a0, .+32 ::
  inputs: a0=0x0000000000000001
  target: reached
c.bnez a0, .+64 ::
  inputs: a0=0x0000000000000001
  target: reached
c.bnez a0, .+128 ::
  inputs: a0=0x0000000000000001
  target: reached
c.bnez a0, .+252 ::
  inputs: a0=0x0000000000000001
  target: reached
c.bnez a5, .-256 ::
  inputs: a5=0x0000000000000001
  target: reached
c.bnez a0, 1f ::
  inputs: a0=0x0000000000000000
  branch: not taken
c.bnez a0, 1f ::
  inputs: a0=0x0000000000000001
  branch: taken
c.bnez a0, 1f ::
  inputs: a0=0x8000000000000000
  branch: taken

